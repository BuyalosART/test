<!doctype html>
<html lang="en">
<head>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1">
	<title>{{ pkg.name }}</title>
	<style>
		* {
			box-sizing: border-box;
		}

		:root {
			--font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto',
				'Helvetica Neue', Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji',
				'Segoe UI Symbol';
			--font-family-code: Menlo, Monaco, Consolas, 'Droid Sans Mono', monospace,
				'Droid Sans Fallback';
			--font-size: 15px;
			--line-height: 1.6;
			--rule: #b7b1ae;
			--background: #d4c9c4;
			--foreground: #262528;
			--link: #005dcc;
			--pre-code: #d1d0cc;
			--inline-code: #926501;
			--code-number: #73c6ee;
			--code-string: #a3c04a;
			--code-literal: #db80c7;
			--code-special: #6ed3d3;
			--code-comment: #84858a;
			--pre-background: #372d39;
			--toc-width: 230px;
			--toc-button-size: 40px;
			--toc-button-margin: 1rem;
			--anchor-offset: -1rem;
			--border-radius: 2px;
		}


		:root,
		body {
			font-family: var(--font-family);
			line-height: var(--line-height);
			font-size: var(--font-size);
			padding: 0;
			margin: 0;
		}

		body {
			background-color: var(--background);
			color: var(--foreground);
		}

		a[name]:not([href]):empty {
			position: absolute;
			margin-top: var(--anchor-offset);
		}

		strong {
			font-weight: 600;
		}

		img {
			max-width: 100%;
			max-height: 100%;
		}

		a {
			color: var(--link);
			text-decoration: none;
		}

		a[href^="#"] {
			color: var(--foreground);
		}

		a:hover {
			text-decoration: underline;
		}

		pre {
			color: var(--pre-code);
			background: var(--pre-background);
			padding: 1rem;
			overflow: auto;
			border-radius: var(--border-radius);
		}


		code {
			font-family: var(--font-family-code);
			font-size: 1em;
			line-height: 1.357em;
			color: var(--inline-code);
		}

		pre code {
			font-family: var(--font-family-code);
			color: var(--pre-code);
			tab-size: 4;
		}

		hr {
			height: 2px;
			border: 0;
			background: var(--rule);
		}

		h1,
		h2,
		h3 {
			font-weight: normal;
		}

		h1 code,
		h2 code,
		h3 code,
		h4 code,
		h5 code,
		h6 code {
			line-height: auto;
		}

		table {
			border-collapse: collapse;
		}

		table>thead>tr>th,
		table>thead>tr>td,
		table>tbody>tr>th,
		table>tbody>tr>td {
			padding: 5px 10px;
		}

		table>tbody>tr+tr>td {
			border-top: 1px solid;
		}


		table>thead>tr>th {
			text-align: left;
			border-bottom: 1px solid;
			border-color: var(--rule);
		}

		table>tbody>tr+tr>td {
			border-color: var(--rule);
		}

		.hljs-keyword,
		.hljs-selector-tag,
		.hljs-title,
		.hljs-section,
		.hljs-doctag,
		.hljs-name,
		.hljs-strong {
			font-weight: bold;
		}

		.hljs-comment {
			color: var(--code-comment);
		}

		.hljs-title,
		.hljs-section,
		.hljs-type,
		.hljs-addition,
		.hljs-tag,
		.hljs-quote,
		.hljs-name,
		.hljs-selector-id,
		.hljs-selector-class,
		.hljs-built_in {
			color: var(--code-special);
		}

		.hljs-literal {
			color: var(--code-literal);
		}

		.hljs-number {
			color: var(--code-number);
		}

		.hljs-string {
			color: var(--code-string);
		}

		.hljs-meta,
		.hljs-subst,
		.hljs-symbol,
		.hljs-regexp,
		.hljs-attribute,
		.hljs-deletion,
		.hljs-variable,
		.hljs-template-variable,
		.hljs-link,
		.hljs-bullet {
			color: #4c81c9;
		}

		.hljs-emphasis {
			font-style: italic;
		}

		section h1 {
			font-size: 2em;
			margin-block-start: 0.67em;
			margin-block-end: 0.67em;
			font-weight: 700;
		}

		#container {
			display: flex;
		}

		main {
			max-width: 700px;
		}

		#toc-container {
			--toc-width: 230px;
			width: var(--toc-width);
			position: relative;
			z-index: 1002;
			margin-right: 1rem;
		}

		#toc {
			position: fixed;
			overflow: auto;
			height: 100%;
			padding: 1rem;
			transition: transform cubic-bezier(0.215, 0.610, 0.355, 1) 0.5s;
			background: var(--background);
			border-right: 1px solid var(--rule);
		}

		#toc a {
			font-weight: 600;
		}

		#toc {
			font-size: smaller;
		}

		#toc h1,
		#toc h2,
		#toc h3 {
			font-weight: 600;
		}

		#toc ul {
			padding: 0;
			list-style: none;
		}

		#toc-button {
			display: none;
			position: fixed;
			z-index: 1003;
			width: var(--toc-button-size);
			height: var(--toc-button-size);
			font-size: calc(0.55*var(--toc-button-size));
			line-height: 1;
			top: var(--toc-button-margin);
			left: var(--toc-button-margin);
			border-radius: var(--border-radius);
			background: var(--background);
			outline: none;
			cursor: pointer;
			appearance: none;
			border: 1px solid #0003;
			border-bottom-width: 2px;
			opacity: 0.925;
			color: var(--pre-background);
		}

		@media (max-width: 958px) {
			:root {
				--padding-top: calc(2*var(--toc-button-margin) + var(--toc-button-size));
				--anchor-offset: calc(-1*var(--padding-top));
			}

			#container {
				display: block;
			}

			#toc-button {
				display: block;
			}

			#toc {
				border: 0;
				box-shadow: -23px 0 10px 20px #0007;
				padding-top: var(--padding-top);
			}

			body:not(.toc-open) #toc {
				transform: translateX(calc(-1 * var(--toc-width)));
			}

			main {
				margin: 0 auto;
				padding: 1rem;
				padding-top: var(--padding-top);
			}
		}

		@media (max-width: 500px) {
			pre {
				font-size: 13.5px;
				line-height: 1.7;
			}

			pre code {
				tab-size: 2;
			}

			body {
				padding-bottom: 200px;
			}
		}

		code span.changed {
			background-color: magenta;
			transition: none;
		}

		code span {
			background-color: transparent;
			transition: background-color 0.5s linear;
		}

	</style>
</head>
<body>

	<div id="container">

		<button id="toc-button">â˜°</button>

		<div id="toc-container">
			<nav id="toc">

				<h1><a href="#">{{ pkg.name }}</a></h1>
				<p>{{ pkg.version }}</p>

				<h2><a href="#Tutorial">Tutorial</a></h2>
				<ul>
					<li><a href="#Tutorial#Sliders">Sliders</a></li>
					<li><a href="#Tutorial#Dropdowns">Dropdowns</a></li>
					<li><a href="#Tutorial#Colors">Colors</a></li>
					<li><a href="#Tutorial#Folders">Folders</a></li>
					<li><a href="#Tutorial#Styling">Styling</a></li>
					<li><a href="#Tutorial#Saving">Saving</a></li>
				</ul>
				<h2><a href="#API">API</a></h2>

			</nav>
		</div>

		<main>

			<section id="README">
				{{{ readme }}}
			</section>

			<section id="Tutorial">
				{{{ tutorial }}}
			</section>

			<section id="API">
				{{{ api }}}
			</section>

		</main>

	</div>

	<script type="module">
		import GUI from '../dist/lil-gui.esm.js';

		const myObject = {
			options: 10,
			boolean: true,
			string: 'lil-gui',
			number: 0.5,
			color: '#a0f',
			function() { alert('hi'); }
		};

		const gui = new GUI();

		gui.add(myObject, 'options', { Small: 1, Medium: 10, Large: 100 });
		gui.add(myObject, 'boolean');
		gui.add(myObject, 'string');
		gui.add(myObject, 'number', 0, 1);
		gui.addColor(myObject, 'color');
		gui.add(myObject, 'function');

		const toc = document.getElementById('toc');

		// todo: this should be done by homepage.js pre-render
		const api = document.getElementById('API');
		let foundHR = false;
		Array.from(api.children).forEach(c => {
			if (foundHR) return;
			if (c.tagName === 'HR') {
				foundHR = true;
			} else if (c.tagName !== 'H1') {
				toc.appendChild(c);
			}
		});

		const tocButton = document.getElementById('toc-button');
		document.body.addEventListener('click', closeTOC);
		toc.addEventListener('click', e => {
			e.stopPropagation();
		});


		function openTOC() {
			document.body.classList.add('toc-open');
		}

		function closeTOC() {
			document.body.classList.remove('toc-open');
		}

		tocButton.addEventListener('click', e => {
			e.stopPropagation();
			document.body.classList.contains('toc-open') ? closeTOC() : openTOC();
		});

		Array.from(document.querySelectorAll('nav a')).forEach(a => {
			a.addEventListener('click', closeTOC)
		});


		{

			const pre = document.querySelector('#Tutorial > pre:nth-of-type(1)');
			const code = pre.querySelector('code');

			const container = makeContainerAfter(pre);

			const gui = new GUI({ container });

			const myObject = {
				myBoolean: true,
				myString: 'lil-gui',
				myNumber: 1,
				myFunction: function () { alert('hi') }
			};

			gui.add(myObject, 'myBoolean')
				.onChange(v => {
					replaceTextAfter(code, /myBoolean: /, v);
				});

			gui.add(myObject, 'myString')
				.onChange(v => {
					replaceTextAfter(code, /myString: /, stringify(v));
				});

			gui.add(myObject, 'myNumber')
				.onChange(v => {
					replaceTextAfter(code, /myNumber: /, v);
				});

			gui.add(myObject, 'myFunction');

		}


		{

			const pre = document.querySelector('#Tutorial > pre:nth-of-type(4)');
			const code = pre.querySelector('code');

			const container = makeContainerAfter(pre);

			const gui = new GUI({ container });

			const params = {
				color1: '#AA00FF',
				color2: '#a0f',
				color3: 'rgb(170, 0, 255)',
				color4: 0xaa00ff
			};

			gui.addColor(params, 'color1')
				.onChange(v => {
					replaceTextAfter(code, /color1: /, stringify(v));
				});

			gui.addColor(params, 'color2')
				.onChange(v => {
					replaceTextAfter(code, /color2: /, stringify(v));
				});

			gui.addColor(params, 'color3')
				.onChange(v => {
					replaceTextAfter(code, /color3: /, stringify(v));
				});

			gui.addColor(params, 'color4')
				.onChange(v => {
					replaceTextAfter(code, /color4: /, v);
				});

		}

		function stringify(v) {
			return `'${v.replace(/'/g, "\\'")}'`;
		}


		// const test = document.querySelector('#Tutorial > pre:nth-child(12) > code');
		// const test2 = document.querySelector('#Tutorial > pre:nth-child(14) > code');

		// replaceTextAfter(test, /color1: /, '"YEA"');
		// replaceTextAfter(test2, /r: /, '420');

		/**
		 * @param {HTMLElement} element
		 * @param {RegExp} re
		 * @param {string} newText
		 */
		function replaceTextAfter(element, re, newText) {
			let str = '';
			let match;
			for (let i = 0; i < element.childNodes.length; i++) {
				const node = element.childNodes.item(i);
				if (node instanceof Text) {
					str += node.nodeValue;
				} else {
					if (re.test(str)) {
						match = node;
						break;
					}
					str += node.innerText;
				}
			}
			if (match) {
				match.innerHTML = newText;
				match.classList.add('changed');
				setTimeout(() => {
					match.classList.remove('changed');
				}, 30);
			}
		}

		function makeContainerAfter(element) {
			const container = document.createElement('div');
			container.classList.add('example-gui-container');
			element.parentElement.insertBefore(container, element.nextElementSibling);
			return container;
		}

	</script>

	{{{ jsdocDebug }}}

</body>
</html>
